/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.kythe;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("plugins/kythe-indexer/testData/signatures")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class SignaturesGeneratorTestGenerated extends AbstractSignaturesGeneratorTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
    }

    public void testAllFilesPresentInSignatures() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("plugins/kythe-indexer/testData/signatures"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("plugins/kythe-indexer/testData/signatures/builtins")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Builtins extends AbstractSignaturesGeneratorTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInBuiltins() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("plugins/kythe-indexer/testData/signatures/builtins"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("arrays.kt")
        public void testArrays() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/builtins/arrays.kt");
        }

        @TestMetadata("primitiveTypes.kt")
        public void testPrimitiveTypes() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/builtins/primitiveTypes.kt");
        }
    }

    @TestMetadata("plugins/kythe-indexer/testData/signatures/classifiers")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Classifiers extends AbstractSignaturesGeneratorTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInClassifiers() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("plugins/kythe-indexer/testData/signatures/classifiers"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("classes.kt")
        public void testClasses() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/classifiers/classes.kt");
        }

        @TestMetadata("companionObject.kt")
        public void testCompanionObject() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/classifiers/companionObject.kt");
        }

        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/classifiers/enum.kt");
        }

        @TestMetadata("enumWithSecondaryCtor.kt")
        public void testEnumWithSecondaryCtor() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/classifiers/enumWithSecondaryCtor.kt");
        }

        @TestMetadata("innerClass.kt")
        public void testInnerClass() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/classifiers/innerClass.kt");
        }

        @TestMetadata("localClasses.kt")
        public void testLocalClasses() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/classifiers/localClasses.kt");
        }

        @TestMetadata("sealedClasses.kt")
        public void testSealedClasses() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/classifiers/sealedClasses.kt");
        }

        @TestMetadata("secondaryConstructorWithInitializersFromClassBody.kt")
        public void testSecondaryConstructorWithInitializersFromClassBody() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/classifiers/secondaryConstructorWithInitializersFromClassBody.kt");
        }

        @TestMetadata("secondaryConstructors.kt")
        public void testSecondaryConstructors() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/classifiers/secondaryConstructors.kt");
        }
    }

    @TestMetadata("plugins/kythe-indexer/testData/signatures/methods")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Methods extends AbstractSignaturesGeneratorTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInMethods() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("plugins/kythe-indexer/testData/signatures/methods"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("localFun.kt")
        public void testLocalFun() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/methods/localFun.kt");
        }
    }

    @TestMetadata("plugins/kythe-indexer/testData/signatures/properties")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Properties extends AbstractSignaturesGeneratorTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInProperties() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("plugins/kythe-indexer/testData/signatures/properties"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("fromConstructor.kt")
        public void testFromConstructor() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/properties/fromConstructor.kt");
        }

        @TestMetadata("simpleVal.kt")
        public void testSimpleVal() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/properties/simpleVal.kt");
        }

        @TestMetadata("simpleVar.kt")
        public void testSimpleVar() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/properties/simpleVar.kt");
        }
    }

    @TestMetadata("plugins/kythe-indexer/testData/signatures/singletons")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Singletons extends AbstractSignaturesGeneratorTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInSingletons() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("plugins/kythe-indexer/testData/signatures/singletons"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("companion.kt")
        public void testCompanion() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/singletons/companion.kt");
        }

        @TestMetadata("enumEntry.kt")
        public void testEnumEntry() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/singletons/enumEntry.kt");
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/singletons/object.kt");
        }
    }

    @TestMetadata("plugins/kythe-indexer/testData/signatures/typeParameters")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TypeParameters extends AbstractSignaturesGeneratorTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInTypeParameters() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("plugins/kythe-indexer/testData/signatures/typeParameters"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("class.kt")
        public void testClass() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/typeParameters/class.kt");
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/typeParameters/constructor.kt");
        }

        @TestMetadata("genericInnerClass.kt")
        public void testGenericInnerClass() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/typeParameters/genericInnerClass.kt");
        }

        @TestMetadata("shadowing.kt")
        public void testShadowing() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/typeParameters/shadowing.kt");
        }

        @TestMetadata("typeParameterBoundedBySubclass.kt")
        public void testTypeParameterBoundedBySubclass() throws Exception {
            runTest("plugins/kythe-indexer/testData/signatures/typeParameters/typeParameterBoundedBySubclass.kt");
        }
    }
}
